program tabulator;
const
{То, что дано в таблице вставим в константы.}
  a = 1;
  b = 2;
  c = 0;
  d = 2;
  h = 0.1;
var x, y, i:real;
BEGIN
{Можно было цикл for испольовать.
Но шаг не равен 1, это немного усложнит код и
сделает его не очевидным.}
{Х пробегает все значения от а до с с шагом 0,1
Y, соответственно, от b до d}

{Перед началом цикла устанавливаем наш счетчик по У на шаг меньше первого значения.
На первом круге цикла мы прибавим наш шаг 0.1 и получим первое значение.
Но есть небольшая проблема.
В компьютере все числа хранятся в двоичной системе.
Из-за этого действительные числа не всегда могут быть представлены абсолютно точно.
Точность -- примерно 10^-18, то есть около 18 знаков после запятой,
этого почти всегда более чем достаточно.
Но иногда возникают проблемы вроде того, что ((a+b)-b) не равно (а).
У нас примерно такая же проблема.
Мы из нуля вычитаем 0.1. Потом прибавляем 0.1. А получаем не ноль, а очень маленькое,
но отрицательное(!) число(около 5*10^-18). И можно было бы забить на него, нам такая точность нафиг не нужна.
Но из этого числа мы берем корень, с понятными последствиями.
Корня из отрицательных чисел не существует.
Компьютер не догадывается, что мы хотим взять корень из 0 на первом шаге.
И предлагает сходить в лес с такими запросами -- кидает ошибку 207.

Щдесь это костыль, мы прибавляем константу, заведомо больше погрешности, получаем ничтожную погрешность,
но не получаем ошибок. А погрешность у нас и так будет.}

  y:= c - h + 10e-17;

  while (y <= d) do
  begin
  {на каждом шаге по У "обнуляем" Х его начальным значением минус шаг.
  У увеличиваем на шаг.}
    x:= a-h;
    y:= y + h;

    while (x <= b) do
    begin
    {На каждом шаге по Х увеличиваем его на шаг}
      x:= x + h;
      {и выводим функцию от текущих значений.
      два числа через двоеточия после переменной это,
      соответственно, сколько символов под нее вывести всего,
      и сколько знаков после запятой оставить.}
      writeln('f(',
        x:3:1,'; ',
        y:3:1,') = ',
        (1/(x+sqrt(y))):5:3
      );
    end;
    {После каждого круга по Х просто выводим пустую строку, так вывод читать легче.}
    writeln();
  end;

END.
